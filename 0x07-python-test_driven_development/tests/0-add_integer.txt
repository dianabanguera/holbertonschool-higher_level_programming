Using ``add_integer``
-----------------------

Parameter "b" is defaulted to int "98"
Makes sure the parameters are type int
Returns the sum of the parameters

First import ``add_integer``

    >>> add_integer = __import__('0-add_integer').add_integer

Regular addition:
    >>> add_integer(2, 3)
    5

Positive with negative:
    >>> add_integer(100, -2)
    98

Negative with positive:
    >>> add_integer(-100, 202)
    102

One input:
    >>> add_integer(2)
    100

Super long int:
    >>> add_integer(999999999999999999999999999999, 1)
	1000000000000000000000000000000

Float and negative input:
    >>> add_integer(100.3, -2)
    98

Float overflow:
    >>> add_integer(1500.5)
    1598

Non-number with number:
	>>> add_integer([1], 2)
    TypeError: a must be an integer

number with non-number:
	>>> add_integer(3, "2")
    TypeError: b must be an integer

Float NaN:
    >>> add_integer(float('NaN'))
    Traceback (most recent call last):
    ...
    ValueError: cannot convert float NaN to integer

String input:
    >>> add_integer(4, "School")
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

None input:
    >>> add_integer(None)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Double negative float input:
    >>> add_integer(-100.5, -10.8)
    -110

Double string input:
    >>> add_integer("holberton", "school")
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer
